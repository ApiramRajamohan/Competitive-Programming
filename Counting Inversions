#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;

ll _mergeSort(ll arr[], ll temp[], ll left, ll right); 
ll merge(ll arr[], ll temp[], ll left, ll mid, ll right); 

ll mergeSort(ll arr[], ll array_size) 
{ 
    ll temp[array_size]; 
    return _mergeSort(arr, temp, 0, array_size - 1); 
    
} 

ll _mergeSort(ll arr[], ll temp[], ll left, ll right) 
{ 
    ll mid, counts = 0; 
    if (right > left) { 


        mid = (right + left) / 2; 

        counts = _mergeSort(arr, temp, left, mid); 
        counts += _mergeSort(arr, temp, mid + 1, right); 

        counts += merge(arr, temp, left, mid + 1, right); 
    } 
    return counts; 
} 


ll merge(ll arr[], ll temp[],ll  left, 
        ll mid, ll right) 
{ 
    ll i, j, k; 
    ll counts = 0; 


    i = left; 


    j = mid; 


    k = left; 


    while ((i <= mid - 1) && (j <= right)) { 
        if (arr[i] > 2 * arr[j]) { //arr[i]>2*arr[j](its changeable to anyform;
            counts += (mid - i); 
            j++; 
        } 
        else { 
            i++; 
        } 
    } 


    i = left; 


    j = mid; 

    k = left; 

    while ((i <= mid - 1) && (j <= right)) { 
        if (arr[i] <= arr[j]) { 
            temp[k++] = arr[i++]; 
        } 
        else { 
            temp[k++] = arr[j++]; 
        } 
    } 
    while (i <= mid - 1) 
        temp[k++] = arr[i++]; 


    while (j <= right) 
        temp[k++] = arr[j++]; 


    for (i = left; i <= right; i++) 
        arr[i] = temp[i]; 

    return counts; 
} 

int main() {
   ll N;
 scanf("%lld",&N);
   ll A[N];
    for (ll i =0 ; i< N;i++){
       scanf("%lld",&A[i]);
    }
printf("%lld",mergeSort(A,N));
}
